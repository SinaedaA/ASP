#!/bin/bash
# Copyright 2021 Simone Maestri. All rights reserved.
# Simone Maestri <simone.maestri@univr.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([outdir],[o],[Path to output directory (default: 2_manifest)],[2_manifest])
# ARG_POSITIONAL_SINGLE([metadata],[Path to metadata.tsv file for the sequencing experiment])
# ARG_POSITIONAL_SINGLE([read_dir],[Directories containing reads (ex: 0_raw_reads/)])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='oh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_metadata=
_arg_read_dir=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_outdir="2_manifest"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-o|--outdir <arg>] [-h|--help] <metadata> <read_dir>\n' "$0"
	printf '\t%s\n' "<metadata>: Path to metadata.tsv file for the sequencing experiment"
	printf '\t%s\n' "<read_dir>: Directories containing reads (ex: 0_raw_reads/)"
	printf '\t%s\n' "-o, --outdir: Path to output directory (default: 2_manifest) (default: '2_manifest')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-o|--outdir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_outdir="$2"
				shift
				;;
			--outdir=*)
				_arg_outdir="${_key##--outdir=}"
				;;
			-o*)
				_arg_outdir="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'metadata' and 'read_dir'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_metadata _arg_read_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
### Get variables
SAMPLE_METADATA=$_arg_metadata
READ_DIR=$_arg_read_dir
OUTDIR=$_arg_outdir

### Create OUTDIR directory if it doesn't exist
if [ ! -d $OUTDIR ]; then
  mkdir -p $OUTDIR;
fi

### Loop over metadata file, to get sample-names and get complete paths to directories with reads (R1 and R2)
# Check the OSTYPE, and accordingly use either realpath or grealpath (on macOS, from coreutils, from Homebrew)
if [[ $OSTYPE == "linux-gnu"* ]]; then
	echo -e sample-id"\t"forward-absolute-filepath"\t"reverse-absolute-filepath > $OUTDIR/manifest.tsv
	for sample in $(cat $SAMPLE_METADATA | cut -f1); do
		## Skip first line, starting with #
		if [[ $sample == \#* ]]; then continue; fi
		R1=$(realpath $(find $READ_DIR | grep $sample"." | grep "R1" | grep "\\.fastq\\.gz"));
		R2=$(realpath $(find $READ_DIR | grep $sample"." | grep "R2" | grep "\\.fastq\\.gz"));
		sample_name=`echo $R1 | rev | cut -d"/" -f1 | rev | cut -d"_" -f1-2`
		echo -e $sample_name"\t"$R1"\t"$R2 >> $OUTDIR/manifest.tsv
	done
elif [[ $OSTYPE == "darwin"* ]]; then
	## Checking if grealpath exists on macOS
	command -v grealpath >/dev/null 2>&1 || { echo >&2 "I require grealpath but it's not installed. Try installing 'coreutils' with.  Aborting."; exit 1; }
	gecho -e sample-id"\t"forward-absolute-filepath"\t"reverse-absolute-filepath > $OUTDIR/manifest.tsv
	for sample in $(cat $SAMPLE_METADATA | cut -f1); do
		## Skip first line, starting with #
		if [[ $sample == \#* ]]; then continue; fi
		R1=$(grealpath $(find $READ_DIR/$RUN | grep $sample"." | grep "R1" | grep "\\.fastq\\.gz"));
		R2=$(grealpath $(find $READ_DIR/$RUN | grep $sample"." | grep "R2" | grep "\\.fastq\\.gz"));
		sample_name=`echo $R1 | rev | cut -d"/" -f1 | rev | cut -d"_" -f1-2`
		echo -e $sample_name"\t"$R1"\t"$R2 >> $OUTDIR/manifest.tsv
	done
fi



# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
