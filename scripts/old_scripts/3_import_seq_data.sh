#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([type],[t],[Type of data: paired-end (pe), single-end (se) (default=pe)],[pe])
# ARG_OPTIONAL_SINGLE([format],[f],[Format of import: Manifest or Casava],[Casava])
# ARG_OPTIONAL_SINGLE([outdir],[o],[Path to output directory (default: 3_analysis)],[3_analysis])
# ARG_OPTIONAL_SINGLE([quality],[q],[Type of quality encoding: phred64 or phred33 (default=phred33)],[phred33])
# ARG_POSITIONAL_SINGLE([input-path],[Path to either directory containing sequencing files, or path to manifest.tsv file])
# ARG_DEFAULTS_POS()
# ARG_HELP([<This script will simply use the manifest.tsv file to import sequencing data into QIIME2.>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='tfoqh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_input_path=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_type="pe"
_arg_format="Casava"
_arg_outdir="3_analysis"
_arg_quality="phred33"


print_help()
{
	printf '%s\n' "<This script will simply use the manifest.tsv file to import sequencing data into QIIME2.>"
	printf 'Usage: %s [-t|--type <arg>] [-f|--format <arg>] [-o|--outdir <arg>] [-q|--quality <arg>] [-h|--help] <input-path>\n' "$0"
	printf '\t%s\n' "<input-path>: Path to either directory containing sequencing files, or path to manifest.tsv file"
	printf '\t%s\n' "-t, --type: Type of data: paired-end (pe), single-end (se) (default=pe) (default: 'pe')"
	printf '\t%s\n' "-f, --format: Format of import: Manifest or Casava (default: 'Casava')"
	printf '\t%s\n' "-o, --outdir: Path to output directory (default: 3_analysis) (default: '3_analysis')"
	printf '\t%s\n' "-q, --quality: Type of quality encoding: phred64 or phred33 (default=phred33) (default: 'phred33')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--type)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_type="$2"
				shift
				;;
			--type=*)
				_arg_type="${_key##--type=}"
				;;
			-t*)
				_arg_type="${_key##-t}"
				;;
			-f|--format)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_format="$2"
				shift
				;;
			--format=*)
				_arg_format="${_key##--format=}"
				;;
			-f*)
				_arg_format="${_key##-f}"
				;;
			-o|--outdir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_outdir="$2"
				shift
				;;
			--outdir=*)
				_arg_outdir="${_key##--outdir=}"
				;;
			-o*)
				_arg_outdir="${_key##-o}"
				;;
			-q|--quality)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_quality="$2"
				shift
				;;
			--quality=*)
				_arg_quality="${_key##--quality=}"
				;;
			-q*)
				_arg_quality="${_key##-q}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'input-path'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_input_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
### Define positional and optional arguments
INPATH=$_arg_input_path
FORMAT=$_arg_format
QUALITY=$_arg_quality
OUTDIR=$_arg_outdir

### Make outdir (3_analysis) if it doesn't exist yet
if [ ! -d $OUTDIR ]; then
  mkdir -p $OUTDIR;
fi

### Define the input-format to give to QIIME, based on type and quality variables
if [[ $_arg_type == "pe" || $_arg_type == "paired-end" ]]; then
    TYPE="SampleData[PairedEndSequencesWithQuality]"
    if [[ $FORMAT == "Manifest" && $QUALITY == "phred33" ]]; then
        INPUT="PairedEndFastqManifestPhred33V2"
    elif [[ $FORMAT == "Manifest" && $QUALITY == "phred64" ]]; then
        INPUT="PairedEndFastqManifestPhred64V2"
    elif [[ $FORMAT == "Casava" ]]; then
        INPUT="CasavaOneEightSingleLanePerSampleDirFmt"
    fi
elif [[ $_arg_type == "se" || $_arg_type == "single-end" ]]
then
    TYPE="SampleData[SingleEndSequencesWithQuality]"
    if [[ $FORMAT == "Manifest" && $QUALITY == "phred33" ]]; then
        INPUT="PairedEndFastqManifestPhred33V2"
    elif [[ $FORMAT == "Manifest" && $QUALITY == "phred64" ]]; then
        INPUT="PairedEndFastqManifestPhred64V2"
    elif [[ $FORMAT == "Casava" ]]; then
        INPUT="CasavaOneEightSingleLanePerSampleDirFmt"
    fi
fi
DATE=`date +"%d-%m-%y"`
echo $DATE >> $OUTDIR/3_import_seq_data.log
echo "Type of data: " $TYPE >> $OUTDIR/3_import_seq_data.log
echo "Input-format: " $INPUT >> $OUTDIR/3_import_seq_data.log
### Importing data
qiime tools import \
    --type $TYPE \
    --input-path $INPATH \
    --output-path $OUTDIR/sequences_raw.qza \
    --input-format $INPUT

qiime demux summarize \
    --i-data $OUTDIR/sequences_raw.qza \
    --o-visualization $OUTDIR/demux_summary_raw.qzv

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
