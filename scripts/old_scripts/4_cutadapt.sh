#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_BOOLEAN([keep-untrimmed],[u],[Whether to keep untrimmed reads or not (default=off)])
# ARG_OPTIONAL_BOOLEAN([reverse-complement],[c],[Whether the reverse complement of the primers are also removed (default=off)])
# ARG_POSITIONAL_SINGLE([primer_file],[File containing the primers used for the amplification, forward and reverse separated by a space])
# ARG_DEFAULTS_POS()
# ARG_HELP([<Script to trim the primers from the sequencing reads.>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='uch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_primer_file=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_keep_untrimmed="off"
_arg_reverse_complement="off"


print_help()
{
	printf '%s\n' "<Script to trim the primers from the sequencing reads.>"
	printf 'Usage: %s [-u|--(no-)keep-untrimmed] [-c|--(no-)reverse-complement] [-h|--help] <primer_file>\n' "$0"
	printf '\t%s\n' "<primer_file>: File containing the primers used for the amplification, forward and reverse separated by a space"
	printf '\t%s\n' "-u, --keep-untrimmed, --no-keep-untrimmed: Whether to keep untrimmed reads or not (default=off) (off by default)"
	printf '\t%s\n' "-c, --reverse-complement, --no-reverse-complement: Whether the reverse complement of the primers are also removed (default=off) (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-u|--no-keep-untrimmed|--keep-untrimmed)
				_arg_keep_untrimmed="on"
				test "${1:0:5}" = "--no-" && _arg_keep_untrimmed="off"
				;;
			-u*)
				_arg_keep_untrimmed="on"
				_next="${_key##-u}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-u" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-c|--no-reverse-complement|--reverse-complement)
				_arg_reverse_complement="on"
				test "${1:0:5}" = "--no-" && _arg_reverse_complement="off"
				;;
			-c*)
				_arg_reverse_complement="on"
				_next="${_key##-c}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'primer_file'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_primer_file "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
PRIMERS=$_arg_primer_file
KEEP_U=$_arg_keep_untrimmed
REVCOMP=$_arg_reverse_complement
### Get primers
FOR=`cat $PRIMERS | cut -d" " -f1`
REV=`cat $PRIMERS | cut -d" " -f2`
### Output directory
OUTDIR="3_analysis/TrimmedSequences"
if [ ! -d $OUTDIR ]; then
  mkdir -p $OUTDIR;
fi

### Actual trimming code
## cutadapt has "discard-untrimmed" option, so we can see activate it or not based on the input of -u parameter of script
## Keep untrimmed means that we want to remove option   --p-discard-untrimmed \ from cutadapt
if [[ $KEEP_U == "off" ]]
then
    qiime cutadapt trim-paired \
        --i-demultiplexed-sequences 3_analysis/sequences_raw.qza \
        --p-cores 20 \
        --p-front-f $FOR \
        --p-front-r $REV \
        --p-discard-untrimmed \
        --verbose \
        --o-trimmed-sequences $OUTDIR/sequences_trimmed1.qza
elif [[ $KEEP_U == "on" ]]
then
    qiime cutadapt trim-paired \
        --i-demultiplexed-sequences 3_analysis/sequences_raw.qza \
        --p-cores 20 \
        --p-front-f $FOR \
        --p-front-r $REV \
        --verbose \
        --o-trimmed-sequences $OUTDIR/sequences_trimmed1.qza
fi

### Create summary and export
qiime demux summarize \
    --i-data $OUTDIR/sequences_trimmed1.qza \
    --o-visualization $OUTDIR/demux_summary_trimmed1.qzv
qiime tools export \
    --input-path $OUTDIR/sequences_trimmed1.qza \
    --output-path $OUTDIR/PrimerTrimming1

### If we also want to remove the REVCOMP of the primers from the reads
if [[ $REVCOMP == "on" ]]
then
    FOR_RC=`python ../scripts/rev_complement.py $FOR`
    REV_RC=`python ../scripts/rev_complement.py $REV`
    echo $FOR_RC $REV_RC
    qiime cutadapt trim-paired \
        --i-demultiplexed-sequences $OUTDIR/sequences_trimmed1.qza \
        --p-cores 20 \
        --p-adapter-r $FOR_RC \
        --p-adapter-f $REV_RC \
        --verbose \
        --o-trimmed-sequences $OUTDIR/sequences_trimmed2.qza
    ### Create summary and export
    qiime demux summarize \
        --i-data $OUTDIR/sequences_trimmed2.qza \
        --o-visualization $OUTDIR/demux_summary_trimmed2.qzv
    qiime tools export \
        --input-path $OUTDIR/sequences_trimmed2.qza \
        --output-path $OUTDIR/PrimerTrimming2
fi

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
